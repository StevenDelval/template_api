{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Accueil"},{"location":"api/crud/","text":"CRUD API create_user ( db , user ) Create a new user in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to interact with the database. user ( UserCreate ) \u2013 The user data to create, including username and password. Returns: User \u2013 The created user object with an assigned ID. Notes The function hashes the provided password using pwd_context.hash and creates a new User instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. Source code in api/crud.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_user ( db : Session , user : UserCreate ): \"\"\" Create a new user in the database. Args: db (Session): The SQLAlchemy database session used to interact with the database. user (UserCreate): The user data to create, including username and password. Returns: User: The created user object with an assigned ID. Notes: The function hashes the provided password using `pwd_context.hash` and creates a new `User` instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. \"\"\" hashed_password = pwd_context . hash ( user . password ) db_user = User ( username = user . username , hashed_password = hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user get_user ( db , username ) Retrieve a user from the database by their username. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to query the database. username ( str ) \u2013 The username of the user to retrieve. Returns: User \u2013 The user object if found, otherwise None. Notes The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. Source code in api/crud.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def get_user ( db : Session , username : str ): \"\"\" Retrieve a user from the database by their username. Args: db (Session): The SQLAlchemy database session used to query the database. username (str): The username of the user to retrieve. Returns: User: The user object if found, otherwise None. Notes: The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. \"\"\" return db . query ( User ) . filter ( User . username == username ) . first ()","title":"crud"},{"location":"api/crud/#crud-api","text":"","title":"CRUD API"},{"location":"api/crud/#api.crud.create_user","text":"Create a new user in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to interact with the database. user ( UserCreate ) \u2013 The user data to create, including username and password. Returns: User \u2013 The created user object with an assigned ID. Notes The function hashes the provided password using pwd_context.hash and creates a new User instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. Source code in api/crud.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_user ( db : Session , user : UserCreate ): \"\"\" Create a new user in the database. Args: db (Session): The SQLAlchemy database session used to interact with the database. user (UserCreate): The user data to create, including username and password. Returns: User: The created user object with an assigned ID. Notes: The function hashes the provided password using `pwd_context.hash` and creates a new `User` instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. \"\"\" hashed_password = pwd_context . hash ( user . password ) db_user = User ( username = user . username , hashed_password = hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user","title":"create_user"},{"location":"api/crud/#api.crud.get_user","text":"Retrieve a user from the database by their username. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to query the database. username ( str ) \u2013 The username of the user to retrieve. Returns: User \u2013 The user object if found, otherwise None. Notes The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. Source code in api/crud.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def get_user ( db : Session , username : str ): \"\"\" Retrieve a user from the database by their username. Args: db (Session): The SQLAlchemy database session used to query the database. username (str): The username of the user to retrieve. Returns: User: The user object if found, otherwise None. Notes: The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. \"\"\" return db . query ( User ) . filter ( User . username == username ) . first ()","title":"get_user"},{"location":"api/introduction/","text":"Documentation API Introduction Code Structure main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server. Endpoints","title":"Introduction"},{"location":"api/introduction/#documentation-api","text":"","title":"Documentation API"},{"location":"api/introduction/#introduction","text":"","title":"Introduction"},{"location":"api/introduction/#code-structure","text":"main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server.","title":"Code Structure"},{"location":"api/introduction/#endpoints","text":"","title":"Endpoints"}]}