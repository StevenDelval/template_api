{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Accueil"},{"location":"api/auth/","text":"AUTH API create_access_token ( data ) Create a JSON Web Token (JWT) with an expiration time. Parameters: data ( dict ) \u2013 The payload data to encode in the JWT. This should be a dictionary containing the claims to be included in the token. Returns: str \u2013 The encoded JWT as a string. Notes The token will include an 'exp' claim indicating the expiration time, which is set to the current time plus the number of minutes specified by ACCESS_TOKEN_EXPIRE_MINUTES . Source code in api/auth.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create_access_token ( data : dict ): \"\"\" Create a JSON Web Token (JWT) with an expiration time. Args: data (dict): The payload data to encode in the JWT. This should be a dictionary containing the claims to be included in the token. Returns: str: The encoded JWT as a string. Notes: The token will include an 'exp' claim indicating the expiration time, which is set to the current time plus the number of minutes specified by `ACCESS_TOKEN_EXPIRE_MINUTES`. \"\"\" to_encode = data . copy () expire = datetime . now ( timezone . utc ) + timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt get_password_hash ( password ) Generate a hashed version of the provided password. Parameters: password ( str ) \u2013 The plain text password to hash. Returns: str \u2013 The hashed password. Source code in api/auth.py 82 83 84 85 86 87 88 89 90 91 92 def get_password_hash ( password ): \"\"\" Generate a hashed version of the provided password. Args: password (str): The plain text password to hash. Returns: str: The hashed password. \"\"\" return pwd_context . hash ( password ) has_access ( credentials = Depends ( HTTPBearer ()), db = Depends ( get_db )) async Validates the access token provided in the request headers. Parameters: credentials ( HTTPAuthorizationCredentials , default: Depends ( HTTPBearer ()) ) \u2013 The bearer token credentials. Returns: bool \u2013 True if the user has access, otherwise raises HTTPException. Raises: HTTPException \u2013 If the token is invalid or the user is not authorized. Source code in api/auth.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 async def has_access ( credentials : HTTPAuthorizationCredentials = Depends ( HTTPBearer ()), db : Session = Depends ( get_db )): \"\"\" Validates the access token provided in the request headers. Args: credentials (HTTPAuthorizationCredentials): The bearer token credentials. Returns: bool: True if the user has access, otherwise raises HTTPException. Raises: HTTPException: If the token is invalid or the user is not authorized. \"\"\" token = credentials . credentials credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) except JWTError : raise credentials_exception if get_user ( db , username ): return True else : raise credentials_exception verify_password ( plain_password , hashed_password ) Verify if the provided plain password matches the hashed password. Parameters: plain_password ( str ) \u2013 The plain text password to check. hashed_password ( str ) \u2013 The hashed password to compare against. Returns: bool \u2013 True if the plain password matches the hashed password, False otherwise. Source code in api/auth.py 69 70 71 72 73 74 75 76 77 78 79 80 def verify_password ( plain_password , hashed_password ): \"\"\" Verify if the provided plain password matches the hashed password. Args: plain_password (str): The plain text password to check. hashed_password (str): The hashed password to compare against. Returns: bool: True if the plain password matches the hashed password, False otherwise. \"\"\" return pwd_context . verify ( plain_password , hashed_password )","title":"auth"},{"location":"api/auth/#auth-api","text":"","title":"AUTH API"},{"location":"api/auth/#api.auth.create_access_token","text":"Create a JSON Web Token (JWT) with an expiration time. Parameters: data ( dict ) \u2013 The payload data to encode in the JWT. This should be a dictionary containing the claims to be included in the token. Returns: str \u2013 The encoded JWT as a string. Notes The token will include an 'exp' claim indicating the expiration time, which is set to the current time plus the number of minutes specified by ACCESS_TOKEN_EXPIRE_MINUTES . Source code in api/auth.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create_access_token ( data : dict ): \"\"\" Create a JSON Web Token (JWT) with an expiration time. Args: data (dict): The payload data to encode in the JWT. This should be a dictionary containing the claims to be included in the token. Returns: str: The encoded JWT as a string. Notes: The token will include an 'exp' claim indicating the expiration time, which is set to the current time plus the number of minutes specified by `ACCESS_TOKEN_EXPIRE_MINUTES`. \"\"\" to_encode = data . copy () expire = datetime . now ( timezone . utc ) + timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt","title":"create_access_token"},{"location":"api/auth/#api.auth.get_password_hash","text":"Generate a hashed version of the provided password. Parameters: password ( str ) \u2013 The plain text password to hash. Returns: str \u2013 The hashed password. Source code in api/auth.py 82 83 84 85 86 87 88 89 90 91 92 def get_password_hash ( password ): \"\"\" Generate a hashed version of the provided password. Args: password (str): The plain text password to hash. Returns: str: The hashed password. \"\"\" return pwd_context . hash ( password )","title":"get_password_hash"},{"location":"api/auth/#api.auth.has_access","text":"Validates the access token provided in the request headers. Parameters: credentials ( HTTPAuthorizationCredentials , default: Depends ( HTTPBearer ()) ) \u2013 The bearer token credentials. Returns: bool \u2013 True if the user has access, otherwise raises HTTPException. Raises: HTTPException \u2013 If the token is invalid or the user is not authorized. Source code in api/auth.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 async def has_access ( credentials : HTTPAuthorizationCredentials = Depends ( HTTPBearer ()), db : Session = Depends ( get_db )): \"\"\" Validates the access token provided in the request headers. Args: credentials (HTTPAuthorizationCredentials): The bearer token credentials. Returns: bool: True if the user has access, otherwise raises HTTPException. Raises: HTTPException: If the token is invalid or the user is not authorized. \"\"\" token = credentials . credentials credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) except JWTError : raise credentials_exception if get_user ( db , username ): return True else : raise credentials_exception","title":"has_access"},{"location":"api/auth/#api.auth.verify_password","text":"Verify if the provided plain password matches the hashed password. Parameters: plain_password ( str ) \u2013 The plain text password to check. hashed_password ( str ) \u2013 The hashed password to compare against. Returns: bool \u2013 True if the plain password matches the hashed password, False otherwise. Source code in api/auth.py 69 70 71 72 73 74 75 76 77 78 79 80 def verify_password ( plain_password , hashed_password ): \"\"\" Verify if the provided plain password matches the hashed password. Args: plain_password (str): The plain text password to check. hashed_password (str): The hashed password to compare against. Returns: bool: True if the plain password matches the hashed password, False otherwise. \"\"\" return pwd_context . verify ( plain_password , hashed_password )","title":"verify_password"},{"location":"api/crud/","text":"CRUD API create_user ( db , user ) Create a new user in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to interact with the database. user ( UserCreate ) \u2013 The user data to create, including username and password. Returns: User \u2013 The created user object with an assigned ID. Notes The function hashes the provided password using pwd_context.hash and creates a new User instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. Source code in api/crud.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_user ( db : Session , user : UserCreate ): \"\"\" Create a new user in the database. Args: db (Session): The SQLAlchemy database session used to interact with the database. user (UserCreate): The user data to create, including username and password. Returns: User: The created user object with an assigned ID. Notes: The function hashes the provided password using `pwd_context.hash` and creates a new `User` instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. \"\"\" hashed_password = pwd_context . hash ( user . password ) db_user = User ( username = user . username , hashed_password = hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user get_user ( db , username ) Retrieve a user from the database by their username. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to query the database. username ( str ) \u2013 The username of the user to retrieve. Returns: User \u2013 The user object if found, otherwise None. Notes The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. Source code in api/crud.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def get_user ( db : Session , username : str ): \"\"\" Retrieve a user from the database by their username. Args: db (Session): The SQLAlchemy database session used to query the database. username (str): The username of the user to retrieve. Returns: User: The user object if found, otherwise None. Notes: The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. \"\"\" return db . query ( User ) . filter ( User . username == username ) . first ()","title":"crud"},{"location":"api/crud/#crud-api","text":"","title":"CRUD API"},{"location":"api/crud/#api.crud.create_user","text":"Create a new user in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to interact with the database. user ( UserCreate ) \u2013 The user data to create, including username and password. Returns: User \u2013 The created user object with an assigned ID. Notes The function hashes the provided password using pwd_context.hash and creates a new User instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. Source code in api/crud.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_user ( db : Session , user : UserCreate ): \"\"\" Create a new user in the database. Args: db (Session): The SQLAlchemy database session used to interact with the database. user (UserCreate): The user data to create, including username and password. Returns: User: The created user object with an assigned ID. Notes: The function hashes the provided password using `pwd_context.hash` and creates a new `User` instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. \"\"\" hashed_password = pwd_context . hash ( user . password ) db_user = User ( username = user . username , hashed_password = hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user","title":"create_user"},{"location":"api/crud/#api.crud.get_user","text":"Retrieve a user from the database by their username. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to query the database. username ( str ) \u2013 The username of the user to retrieve. Returns: User \u2013 The user object if found, otherwise None. Notes The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. Source code in api/crud.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def get_user ( db : Session , username : str ): \"\"\" Retrieve a user from the database by their username. Args: db (Session): The SQLAlchemy database session used to query the database. username (str): The username of the user to retrieve. Returns: User: The user object if found, otherwise None. Notes: The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. \"\"\" return db . query ( User ) . filter ( User . username == username ) . first ()","title":"get_user"},{"location":"api/database/","text":"DATABASE API get_db () Dependency that provides a SQLAlchemy database session. Yields: Session \u2013 A SQLAlchemy session instance that is used to interact with the database. Notes The session is created and yielded for use in database operations. After the operation, the session is closed to release the database connection. Source code in api/database.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def get_db (): \"\"\" Dependency that provides a SQLAlchemy database session. Yields: Session: A SQLAlchemy session instance that is used to interact with the database. Notes: The session is created and yielded for use in database operations. After the operation, the session is closed to release the database connection. \"\"\" db = Session () try : yield db finally : db . close ()","title":"database"},{"location":"api/database/#database-api","text":"","title":"DATABASE API"},{"location":"api/database/#api.database.get_db","text":"Dependency that provides a SQLAlchemy database session. Yields: Session \u2013 A SQLAlchemy session instance that is used to interact with the database. Notes The session is created and yielded for use in database operations. After the operation, the session is closed to release the database connection. Source code in api/database.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def get_db (): \"\"\" Dependency that provides a SQLAlchemy database session. Yields: Session: A SQLAlchemy session instance that is used to interact with the database. Notes: The session is created and yielded for use in database operations. After the operation, the session is closed to release the database connection. \"\"\" db = Session () try : yield db finally : db . close ()","title":"get_db"},{"location":"api/introduction/","text":"Documentation API Introduction Code Structure main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server. Endpoints","title":"Introduction"},{"location":"api/introduction/#documentation-api","text":"","title":"Documentation API"},{"location":"api/introduction/#introduction","text":"","title":"Introduction"},{"location":"api/introduction/#code-structure","text":"main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server.","title":"Code Structure"},{"location":"api/introduction/#endpoints","text":"","title":"Endpoints"},{"location":"api/main/","text":"MAIN API","title":"main"},{"location":"api/main/#main-api","text":"","title":"MAIN API"},{"location":"api/models/","text":"MODELS API User Bases: Base SQLAlchemy model for the User table. This model represents a user in the system and maps to the 'users' table in the database. Attributes: id ( Column ) \u2013 The unique identifier for the user. An auto-incremented integer and primary key. username ( Column ) \u2013 The username for the user. Must be unique and is indexed for faster queries. hashed_password ( Column ) \u2013 The hashed password for the user. Stored as a string. Table users : The table in the database where user records are stored. Notes The id field is automatically assigned by the database and does not need to be specified when creating a new user. The username must be unique to prevent duplicate accounts. Source code in api/models.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class User ( Base ): \"\"\" SQLAlchemy model for the User table. This model represents a user in the system and maps to the 'users' table in the database. Attributes: id (Column): The unique identifier for the user. An auto-incremented integer and primary key. username (Column): The username for the user. Must be unique and is indexed for faster queries. hashed_password (Column): The hashed password for the user. Stored as a string. Table: - `users`: The table in the database where user records are stored. Notes: The `id` field is automatically assigned by the database and does not need to be specified when creating a new user. The `username` must be unique to prevent duplicate accounts. \"\"\" __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) username = Column ( String , unique = True , index = True ) hashed_password = Column ( String )","title":"models"},{"location":"api/models/#models-api","text":"","title":"MODELS API"},{"location":"api/models/#api.models.User","text":"Bases: Base SQLAlchemy model for the User table. This model represents a user in the system and maps to the 'users' table in the database. Attributes: id ( Column ) \u2013 The unique identifier for the user. An auto-incremented integer and primary key. username ( Column ) \u2013 The username for the user. Must be unique and is indexed for faster queries. hashed_password ( Column ) \u2013 The hashed password for the user. Stored as a string. Table users : The table in the database where user records are stored. Notes The id field is automatically assigned by the database and does not need to be specified when creating a new user. The username must be unique to prevent duplicate accounts. Source code in api/models.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class User ( Base ): \"\"\" SQLAlchemy model for the User table. This model represents a user in the system and maps to the 'users' table in the database. Attributes: id (Column): The unique identifier for the user. An auto-incremented integer and primary key. username (Column): The username for the user. Must be unique and is indexed for faster queries. hashed_password (Column): The hashed password for the user. Stored as a string. Table: - `users`: The table in the database where user records are stored. Notes: The `id` field is automatically assigned by the database and does not need to be specified when creating a new user. The `username` must be unique to prevent duplicate accounts. \"\"\" __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) username = Column ( String , unique = True , index = True ) hashed_password = Column ( String )","title":"User"},{"location":"api/router/data_router/","text":"ROUTER/DATA_ROUTER get_hello () Simple endpoint that returns a greeting message. This endpoint is a basic test route that returns a static string message. Returns: str \u2013 A greeting message \"Hello !\". Notes This endpoint does not perform any database operations or require any request body. It is primarily used for testing and ensuring that the API is accessible. Source code in api/router/data_router.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @router . post ( \"/hello\" ) def get_hello (): \"\"\" Simple endpoint that returns a greeting message. This endpoint is a basic test route that returns a static string message. Returns: str: A greeting message \"Hello !\". Notes: This endpoint does not perform any database operations or require any request body. It is primarily used for testing and ensuring that the API is accessible. \"\"\" return \"Hello !\"","title":"data_router"},{"location":"api/router/data_router/#routerdata_router","text":"","title":"ROUTER/DATA_ROUTER"},{"location":"api/router/data_router/#api.router.data_router.get_hello","text":"Simple endpoint that returns a greeting message. This endpoint is a basic test route that returns a static string message. Returns: str \u2013 A greeting message \"Hello !\". Notes This endpoint does not perform any database operations or require any request body. It is primarily used for testing and ensuring that the API is accessible. Source code in api/router/data_router.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @router . post ( \"/hello\" ) def get_hello (): \"\"\" Simple endpoint that returns a greeting message. This endpoint is a basic test route that returns a static string message. Returns: str: A greeting message \"Hello !\". Notes: This endpoint does not perform any database operations or require any request body. It is primarily used for testing and ensuring that the API is accessible. \"\"\" return \"Hello !\"","title":"get_hello"},{"location":"api/router/user_router/","text":"ROUTER/USER_ROUTER create_access_token ( form_data , db = Depends ( get_db )) Generate a new access token for a user based on provided credentials. Parameters: form_data ( UserCreate ) \u2013 The user credentials including username and password. db ( Session , default: Depends ( get_db ) ) \u2013 The database session dependency, used to interact with the database. Returns: dict \u2013 A dictionary containing the access token and the token type. Raises: HTTPException \u2013 If the provided credentials are incorrect, a 401 Unauthorized error is raised. Notes The function checks the provided username and password against the stored user data in the database. If the credentials are valid, an access token is generated using the create_access_token function from the auth module. Source code in api/router/user_router.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @router . post ( \"/create_access_token\" ) def create_access_token ( form_data : schemas . UserCreate , db : Session = Depends ( get_db )): \"\"\" Generate a new access token for a user based on provided credentials. Args: form_data (schemas.UserCreate): The user credentials including username and password. db (Session, optional): The database session dependency, used to interact with the database. Returns: dict: A dictionary containing the access token and the token type. Raises: HTTPException: If the provided credentials are incorrect, a 401 Unauthorized error is raised. Notes: The function checks the provided username and password against the stored user data in the database. If the credentials are valid, an access token is generated using the `create_access_token` function from the `auth` module. \"\"\" user = crud . get_user ( db , form_data . username ) if not user or not auth . verify_password ( form_data . password , user . hashed_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" ) access_token = auth . create_access_token ( data = { \"sub\" : user . username }) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } create_user ( user , db = Depends ( get_db )) Create a new user in the database. Parameters: user ( UserCreate ) \u2013 The user data including username and password to be created. db ( Session , default: Depends ( get_db ) ) \u2013 The database session dependency, used to interact with the database. Returns: \u2013 schemas.UserOut: The created user information, including the user ID and username. Raises: HTTPException \u2013 If the username is already registered, a 400 Bad Request error is raised. Notes The function checks if the username is already taken. If not, a new user is created using the create_user function from the crud module. Source code in api/router/user_router.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @router . post ( \"/create_user/\" , response_model = schemas . UserOut ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): \"\"\" Create a new user in the database. Args: user (schemas.UserCreate): The user data including username and password to be created. db (Session, optional): The database session dependency, used to interact with the database. Returns: schemas.UserOut: The created user information, including the user ID and username. Raises: HTTPException: If the username is already registered, a 400 Bad Request error is raised. Notes: The function checks if the username is already taken. If not, a new user is created using the `create_user` function from the `crud` module. \"\"\" db_user = crud . get_user ( db , user . username ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Username already registered\" ) return crud . create_user ( db = db , user = user )","title":"user_router"},{"location":"api/router/user_router/#routeruser_router","text":"","title":"ROUTER/USER_ROUTER"},{"location":"api/router/user_router/#api.router.user_router.create_access_token","text":"Generate a new access token for a user based on provided credentials. Parameters: form_data ( UserCreate ) \u2013 The user credentials including username and password. db ( Session , default: Depends ( get_db ) ) \u2013 The database session dependency, used to interact with the database. Returns: dict \u2013 A dictionary containing the access token and the token type. Raises: HTTPException \u2013 If the provided credentials are incorrect, a 401 Unauthorized error is raised. Notes The function checks the provided username and password against the stored user data in the database. If the credentials are valid, an access token is generated using the create_access_token function from the auth module. Source code in api/router/user_router.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @router . post ( \"/create_access_token\" ) def create_access_token ( form_data : schemas . UserCreate , db : Session = Depends ( get_db )): \"\"\" Generate a new access token for a user based on provided credentials. Args: form_data (schemas.UserCreate): The user credentials including username and password. db (Session, optional): The database session dependency, used to interact with the database. Returns: dict: A dictionary containing the access token and the token type. Raises: HTTPException: If the provided credentials are incorrect, a 401 Unauthorized error is raised. Notes: The function checks the provided username and password against the stored user data in the database. If the credentials are valid, an access token is generated using the `create_access_token` function from the `auth` module. \"\"\" user = crud . get_user ( db , form_data . username ) if not user or not auth . verify_password ( form_data . password , user . hashed_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" ) access_token = auth . create_access_token ( data = { \"sub\" : user . username }) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" }","title":"create_access_token"},{"location":"api/router/user_router/#api.router.user_router.create_user","text":"Create a new user in the database. Parameters: user ( UserCreate ) \u2013 The user data including username and password to be created. db ( Session , default: Depends ( get_db ) ) \u2013 The database session dependency, used to interact with the database. Returns: \u2013 schemas.UserOut: The created user information, including the user ID and username. Raises: HTTPException \u2013 If the username is already registered, a 400 Bad Request error is raised. Notes The function checks if the username is already taken. If not, a new user is created using the create_user function from the crud module. Source code in api/router/user_router.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @router . post ( \"/create_user/\" , response_model = schemas . UserOut ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): \"\"\" Create a new user in the database. Args: user (schemas.UserCreate): The user data including username and password to be created. db (Session, optional): The database session dependency, used to interact with the database. Returns: schemas.UserOut: The created user information, including the user ID and username. Raises: HTTPException: If the username is already registered, a 400 Bad Request error is raised. Notes: The function checks if the username is already taken. If not, a new user is created using the `create_user` function from the `crud` module. \"\"\" db_user = crud . get_user ( db , user . username ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Username already registered\" ) return crud . create_user ( db = db , user = user )","title":"create_user"}]}