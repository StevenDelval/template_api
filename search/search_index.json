{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Template API Documentation Welcome to the documentation for the Template API. This API provides endpoints and functionality for managing users, creating tokens, and interacting with a database. Table of Contents Introduction API Documentation Database Models CRUD Operations Authentication Router Endpoints Data Router Endpoints","title":"Accueil"},{"location":"#welcome-to-the-template-api-documentation","text":"Welcome to the documentation for the Template API. This API provides endpoints and functionality for managing users, creating tokens, and interacting with a database.","title":"Welcome to the Template API Documentation"},{"location":"#table-of-contents","text":"Introduction API Documentation Database Models CRUD Operations Authentication Router Endpoints Data Router Endpoints","title":"Table of Contents"},{"location":"api/auth/","text":"Authentication This section covers the authentication mechanisms provided by the Template API. create_access_token ( data ) Create a JSON Web Token (JWT) with an expiration time. Parameters: data ( dict ) \u2013 The payload data to encode in the JWT. This should be a dictionary containing the claims to be included in the token. Returns: str \u2013 The encoded JWT as a string. Notes The token will include an 'exp' claim indicating the expiration time, which is set to the current time plus the number of minutes specified by ACCESS_TOKEN_EXPIRE_MINUTES . Source code in api/auth.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create_access_token ( data : dict ): \"\"\" Create a JSON Web Token (JWT) with an expiration time. Args: data (dict): The payload data to encode in the JWT. This should be a dictionary containing the claims to be included in the token. Returns: str: The encoded JWT as a string. Notes: The token will include an 'exp' claim indicating the expiration time, which is set to the current time plus the number of minutes specified by `ACCESS_TOKEN_EXPIRE_MINUTES`. \"\"\" to_encode = data . copy () expire = datetime . now ( timezone . utc ) + timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt get_password_hash ( password ) Generate a hashed version of the provided password. Parameters: password ( str ) \u2013 The plain text password to hash. Returns: str \u2013 The hashed password. Source code in api/auth.py 82 83 84 85 86 87 88 89 90 91 92 def get_password_hash ( password ): \"\"\" Generate a hashed version of the provided password. Args: password (str): The plain text password to hash. Returns: str: The hashed password. \"\"\" return pwd_context . hash ( password ) has_access ( credentials = Depends ( HTTPBearer ()), db = Depends ( get_db )) async Validates the access token provided in the request headers. Parameters: credentials ( HTTPAuthorizationCredentials , default: Depends ( HTTPBearer ()) ) \u2013 The bearer token credentials. Returns: bool \u2013 True if the user has access, otherwise raises HTTPException. Raises: HTTPException \u2013 If the token is invalid or the user is not authorized. Source code in api/auth.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 async def has_access ( credentials : HTTPAuthorizationCredentials = Depends ( HTTPBearer ()), db : Session = Depends ( get_db )): \"\"\" Validates the access token provided in the request headers. Args: credentials (HTTPAuthorizationCredentials): The bearer token credentials. Returns: bool: True if the user has access, otherwise raises HTTPException. Raises: HTTPException: If the token is invalid or the user is not authorized. \"\"\" token = credentials . credentials credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) except JWTError : raise credentials_exception if get_user ( db , username ): return True else : raise credentials_exception verify_password ( plain_password , hashed_password ) Verify if the provided plain password matches the hashed password. Parameters: plain_password ( str ) \u2013 The plain text password to check. hashed_password ( str ) \u2013 The hashed password to compare against. Returns: bool \u2013 True if the plain password matches the hashed password, False otherwise. Source code in api/auth.py 69 70 71 72 73 74 75 76 77 78 79 80 def verify_password ( plain_password , hashed_password ): \"\"\" Verify if the provided plain password matches the hashed password. Args: plain_password (str): The plain text password to check. hashed_password (str): The hashed password to compare against. Returns: bool: True if the plain password matches the hashed password, False otherwise. \"\"\" return pwd_context . verify ( plain_password , hashed_password )","title":"auth"},{"location":"api/auth/#authentication","text":"This section covers the authentication mechanisms provided by the Template API.","title":"Authentication"},{"location":"api/auth/#api.auth.create_access_token","text":"Create a JSON Web Token (JWT) with an expiration time. Parameters: data ( dict ) \u2013 The payload data to encode in the JWT. This should be a dictionary containing the claims to be included in the token. Returns: str \u2013 The encoded JWT as a string. Notes The token will include an 'exp' claim indicating the expiration time, which is set to the current time plus the number of minutes specified by ACCESS_TOKEN_EXPIRE_MINUTES . Source code in api/auth.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def create_access_token ( data : dict ): \"\"\" Create a JSON Web Token (JWT) with an expiration time. Args: data (dict): The payload data to encode in the JWT. This should be a dictionary containing the claims to be included in the token. Returns: str: The encoded JWT as a string. Notes: The token will include an 'exp' claim indicating the expiration time, which is set to the current time plus the number of minutes specified by `ACCESS_TOKEN_EXPIRE_MINUTES`. \"\"\" to_encode = data . copy () expire = datetime . now ( timezone . utc ) + timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt","title":"create_access_token"},{"location":"api/auth/#api.auth.get_password_hash","text":"Generate a hashed version of the provided password. Parameters: password ( str ) \u2013 The plain text password to hash. Returns: str \u2013 The hashed password. Source code in api/auth.py 82 83 84 85 86 87 88 89 90 91 92 def get_password_hash ( password ): \"\"\" Generate a hashed version of the provided password. Args: password (str): The plain text password to hash. Returns: str: The hashed password. \"\"\" return pwd_context . hash ( password )","title":"get_password_hash"},{"location":"api/auth/#api.auth.has_access","text":"Validates the access token provided in the request headers. Parameters: credentials ( HTTPAuthorizationCredentials , default: Depends ( HTTPBearer ()) ) \u2013 The bearer token credentials. Returns: bool \u2013 True if the user has access, otherwise raises HTTPException. Raises: HTTPException \u2013 If the token is invalid or the user is not authorized. Source code in api/auth.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 async def has_access ( credentials : HTTPAuthorizationCredentials = Depends ( HTTPBearer ()), db : Session = Depends ( get_db )): \"\"\" Validates the access token provided in the request headers. Args: credentials (HTTPAuthorizationCredentials): The bearer token credentials. Returns: bool: True if the user has access, otherwise raises HTTPException. Raises: HTTPException: If the token is invalid or the user is not authorized. \"\"\" token = credentials . credentials credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) except JWTError : raise credentials_exception if get_user ( db , username ): return True else : raise credentials_exception","title":"has_access"},{"location":"api/auth/#api.auth.verify_password","text":"Verify if the provided plain password matches the hashed password. Parameters: plain_password ( str ) \u2013 The plain text password to check. hashed_password ( str ) \u2013 The hashed password to compare against. Returns: bool \u2013 True if the plain password matches the hashed password, False otherwise. Source code in api/auth.py 69 70 71 72 73 74 75 76 77 78 79 80 def verify_password ( plain_password , hashed_password ): \"\"\" Verify if the provided plain password matches the hashed password. Args: plain_password (str): The plain text password to check. hashed_password (str): The hashed password to compare against. Returns: bool: True if the plain password matches the hashed password, False otherwise. \"\"\" return pwd_context . verify ( plain_password , hashed_password )","title":"verify_password"},{"location":"api/crud/","text":"CRUD Operations The CRUD (Create, Read, Update, Delete) operations manage interactions with the database. create_user ( db , user ) Create a new user in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to interact with the database. user ( UserCreate ) \u2013 The user data to create, including username and password. Returns: User \u2013 The created user object with an assigned ID. Notes The function hashes the provided password using pwd_context.hash and creates a new User instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. Source code in api/crud.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_user ( db : Session , user : UserCreate ): \"\"\" Create a new user in the database. Args: db (Session): The SQLAlchemy database session used to interact with the database. user (UserCreate): The user data to create, including username and password. Returns: User: The created user object with an assigned ID. Notes: The function hashes the provided password using `pwd_context.hash` and creates a new `User` instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. \"\"\" hashed_password = pwd_context . hash ( user . password ) db_user = User ( username = user . username , hashed_password = hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user get_user ( db , username ) Retrieve a user from the database by their username. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to query the database. username ( str ) \u2013 The username of the user to retrieve. Returns: User \u2013 The user object if found, otherwise None. Notes The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. Source code in api/crud.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def get_user ( db : Session , username : str ): \"\"\" Retrieve a user from the database by their username. Args: db (Session): The SQLAlchemy database session used to query the database. username (str): The username of the user to retrieve. Returns: User: The user object if found, otherwise None. Notes: The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. \"\"\" return db . query ( User ) . filter ( User . username == username ) . first ()","title":"crud"},{"location":"api/crud/#crud-operations","text":"The CRUD (Create, Read, Update, Delete) operations manage interactions with the database.","title":"CRUD Operations"},{"location":"api/crud/#api.crud.create_user","text":"Create a new user in the database. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to interact with the database. user ( UserCreate ) \u2013 The user data to create, including username and password. Returns: User \u2013 The created user object with an assigned ID. Notes The function hashes the provided password using pwd_context.hash and creates a new User instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. Source code in api/crud.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def create_user ( db : Session , user : UserCreate ): \"\"\" Create a new user in the database. Args: db (Session): The SQLAlchemy database session used to interact with the database. user (UserCreate): The user data to create, including username and password. Returns: User: The created user object with an assigned ID. Notes: The function hashes the provided password using `pwd_context.hash` and creates a new `User` instance with the hashed password. The new user is then added to the database, committed, and refreshed to obtain the new user\u2019s ID. \"\"\" hashed_password = pwd_context . hash ( user . password ) db_user = User ( username = user . username , hashed_password = hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user","title":"create_user"},{"location":"api/crud/#api.crud.get_user","text":"Retrieve a user from the database by their username. Parameters: db ( Session ) \u2013 The SQLAlchemy database session used to query the database. username ( str ) \u2013 The username of the user to retrieve. Returns: User \u2013 The user object if found, otherwise None. Notes The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. Source code in api/crud.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def get_user ( db : Session , username : str ): \"\"\" Retrieve a user from the database by their username. Args: db (Session): The SQLAlchemy database session used to query the database. username (str): The username of the user to retrieve. Returns: User: The user object if found, otherwise None. Notes: The function performs a query to find a user with the matching username. It returns the first matching user or None if no user is found. \"\"\" return db . query ( User ) . filter ( User . username == username ) . first ()","title":"get_user"},{"location":"api/database/","text":"Database Configuration This section details the database setup and configuration for the Template API. Database URL The database connection URL is determined based on the environment settings. It can be either PostgreSQL or SQLite. get_db () Dependency that provides a SQLAlchemy database session. Yields: Session \u2013 A SQLAlchemy session instance that is used to interact with the database. Notes The session is created and yielded for use in database operations. After the operation, the session is closed to release the database connection. Source code in api/database.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def get_db (): \"\"\" Dependency that provides a SQLAlchemy database session. Yields: Session: A SQLAlchemy session instance that is used to interact with the database. Notes: The session is created and yielded for use in database operations. After the operation, the session is closed to release the database connection. \"\"\" db = Session () try : yield db finally : db . close ()","title":"database"},{"location":"api/database/#database-configuration","text":"This section details the database setup and configuration for the Template API.","title":"Database Configuration"},{"location":"api/database/#database-url","text":"The database connection URL is determined based on the environment settings. It can be either PostgreSQL or SQLite.","title":"Database URL"},{"location":"api/database/#api.database.get_db","text":"Dependency that provides a SQLAlchemy database session. Yields: Session \u2013 A SQLAlchemy session instance that is used to interact with the database. Notes The session is created and yielded for use in database operations. After the operation, the session is closed to release the database connection. Source code in api/database.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def get_db (): \"\"\" Dependency that provides a SQLAlchemy database session. Yields: Session: A SQLAlchemy session instance that is used to interact with the database. Notes: The session is created and yielded for use in database operations. After the operation, the session is closed to release the database connection. \"\"\" db = Session () try : yield db finally : db . close ()","title":"get_db"},{"location":"api/introduction/","text":"Documentation API This document provides an overview of the Template API, including its purpose, functionality, and usage. Purpose The Template API is designed to manage user data, authenticate users, and interact with a database. It provides endpoints to create and manage users, generate authentication tokens, and perform CRUD operations. Features User creation and management Token generation and verification CRUD operations for data Database interactions with SQLAlchemy Authentication with JWT Getting Started Setup : Configure environment variables and dependencies. Run : Start the FastAPI server. Use : Make API requests to the endpoints defined in the documentation. Refer to the API Documentation for detailed information on each endpoint and its usage. Code Structure The Template API project is organized into several key files and directories, each serving a specific purpose in the application. Here\u2019s a high-level overview of the project structure: main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server. This file typically includes the creation of the FastAPI app instance and the inclusion of router modules. database.py : Contains the database configuration and setup, including SQLAlchemy engine, session management, and database models. models.py : Defines the SQLAlchemy models used in the application, including the User model and any other entities. crud.py : Implements the CRUD (Create, Read, Update, Delete) operations for interacting with the database. auth.py : Handles authentication-related functionality, including token creation, password hashing, and verification. schemas.py : Defines the Pydantic models (schemas) used for request and response validation. router/ user_router.py : Contains the routes and logic related to user management, including endpoints for user creation and token generation. data_router.py : Contains the routes and logic for managing data entities. .env : Environment configuration file where sensitive data and configuration parameters such as database credentials and secret keys are stored. Environment Variable Structure The environment variables are used to configure various aspects of the Template API application. These variables are typically stored in a .env file and are loaded into the application to set up database connections, authentication, and other configurations. Below is the structure of the .env file along with explanations for each variable: ```ini Determines whether to use PostgreSQL or SQLite as the database. 1 for PostgreSQL, 0 for SQLite IS_POSTGRES=0 PostgreSQL Configuration (used if IS_POSTGRES is set to 1) DB_USERNAME=\"\" # The username for the PostgreSQL database DB_HOSTNAME=\"\" # The hostname or IP address of the PostgreSQL server DB_PORT=\"\" # The port number on which the PostgreSQL server is listening DB_NAME=\"\" # The name of the PostgreSQL database DB_PASSWORD=\"\" # The password for the PostgreSQL user Secret key used for encoding and decoding JWT tokens SECRET_KEY=\"your_secret_key\" Algorithm used for encoding JWT tokens ALGORITHM=\"HS256\" # The algorithm used to sign JWT tokens. HS256 is a common choice. Access token expiration time in minutes ACCESS_TOKEN_EXPIRE_MINUTES=30","title":"Introduction"},{"location":"api/introduction/#documentation-api","text":"This document provides an overview of the Template API, including its purpose, functionality, and usage.","title":"Documentation API"},{"location":"api/introduction/#purpose","text":"The Template API is designed to manage user data, authenticate users, and interact with a database. It provides endpoints to create and manage users, generate authentication tokens, and perform CRUD operations.","title":"Purpose"},{"location":"api/introduction/#features","text":"User creation and management Token generation and verification CRUD operations for data Database interactions with SQLAlchemy Authentication with JWT","title":"Features"},{"location":"api/introduction/#getting-started","text":"Setup : Configure environment variables and dependencies. Run : Start the FastAPI server. Use : Make API requests to the endpoints defined in the documentation. Refer to the API Documentation for detailed information on each endpoint and its usage.","title":"Getting Started"},{"location":"api/introduction/#code-structure","text":"The Template API project is organized into several key files and directories, each serving a specific purpose in the application. Here\u2019s a high-level overview of the project structure: main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server. This file typically includes the creation of the FastAPI app instance and the inclusion of router modules. database.py : Contains the database configuration and setup, including SQLAlchemy engine, session management, and database models. models.py : Defines the SQLAlchemy models used in the application, including the User model and any other entities. crud.py : Implements the CRUD (Create, Read, Update, Delete) operations for interacting with the database. auth.py : Handles authentication-related functionality, including token creation, password hashing, and verification. schemas.py : Defines the Pydantic models (schemas) used for request and response validation. router/ user_router.py : Contains the routes and logic related to user management, including endpoints for user creation and token generation. data_router.py : Contains the routes and logic for managing data entities. .env : Environment configuration file where sensitive data and configuration parameters such as database credentials and secret keys are stored.","title":"Code Structure"},{"location":"api/introduction/#environment-variable-structure","text":"The environment variables are used to configure various aspects of the Template API application. These variables are typically stored in a .env file and are loaded into the application to set up database connections, authentication, and other configurations. Below is the structure of the .env file along with explanations for each variable: ```ini","title":"Environment Variable Structure"},{"location":"api/introduction/#determines-whether-to-use-postgresql-or-sqlite-as-the-database","text":"","title":"Determines whether to use PostgreSQL or SQLite as the database."},{"location":"api/introduction/#1-for-postgresql-0-for-sqlite","text":"IS_POSTGRES=0","title":"1 for PostgreSQL, 0 for SQLite"},{"location":"api/introduction/#postgresql-configuration-used-if-is_postgres-is-set-to-1","text":"DB_USERNAME=\"\" # The username for the PostgreSQL database DB_HOSTNAME=\"\" # The hostname or IP address of the PostgreSQL server DB_PORT=\"\" # The port number on which the PostgreSQL server is listening DB_NAME=\"\" # The name of the PostgreSQL database DB_PASSWORD=\"\" # The password for the PostgreSQL user","title":"PostgreSQL Configuration (used if IS_POSTGRES is set to 1)"},{"location":"api/introduction/#secret-key-used-for-encoding-and-decoding-jwt-tokens","text":"SECRET_KEY=\"your_secret_key\"","title":"Secret key used for encoding and decoding JWT tokens"},{"location":"api/introduction/#algorithm-used-for-encoding-jwt-tokens","text":"ALGORITHM=\"HS256\" # The algorithm used to sign JWT tokens. HS256 is a common choice.","title":"Algorithm used for encoding JWT tokens"},{"location":"api/introduction/#access-token-expiration-time-in-minutes","text":"ACCESS_TOKEN_EXPIRE_MINUTES=30","title":"Access token expiration time in minutes"},{"location":"api/main/","text":"API Documentation The Template API provides a set of endpoints to manage user data and interact with the system. Below is an overview of the available endpoints and their functionality. Endpoints User Management Data Management For detailed information on each endpoint, please refer to the respective sections in this documentation.","title":"main"},{"location":"api/main/#api-documentation","text":"The Template API provides a set of endpoints to manage user data and interact with the system. Below is an overview of the available endpoints and their functionality.","title":"API Documentation"},{"location":"api/main/#endpoints","text":"User Management Data Management For detailed information on each endpoint, please refer to the respective sections in this documentation.","title":"Endpoints"},{"location":"api/models/","text":"Database Models This section provides an overview of the database models used in the Template API. Models are defined using SQLAlchemy ORM. User Bases: Base SQLAlchemy model for the User table. This model represents a user in the system and maps to the 'users' table in the database. Attributes: id ( Column ) \u2013 The unique identifier for the user. An auto-incremented integer and primary key. username ( Column ) \u2013 The username for the user. Must be unique and is indexed for faster queries. hashed_password ( Column ) \u2013 The hashed password for the user. Stored as a string. Table users : The table in the database where user records are stored. Notes The id field is automatically assigned by the database and does not need to be specified when creating a new user. The username must be unique to prevent duplicate accounts. Source code in api/models.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class User ( Base ): \"\"\" SQLAlchemy model for the User table. This model represents a user in the system and maps to the 'users' table in the database. Attributes: id (Column): The unique identifier for the user. An auto-incremented integer and primary key. username (Column): The username for the user. Must be unique and is indexed for faster queries. hashed_password (Column): The hashed password for the user. Stored as a string. Table: - `users`: The table in the database where user records are stored. Notes: The `id` field is automatically assigned by the database and does not need to be specified when creating a new user. The `username` must be unique to prevent duplicate accounts. \"\"\" __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) username = Column ( String , unique = True , index = True ) hashed_password = Column ( String )","title":"models"},{"location":"api/models/#database-models","text":"This section provides an overview of the database models used in the Template API. Models are defined using SQLAlchemy ORM.","title":"Database Models"},{"location":"api/models/#api.models.User","text":"Bases: Base SQLAlchemy model for the User table. This model represents a user in the system and maps to the 'users' table in the database. Attributes: id ( Column ) \u2013 The unique identifier for the user. An auto-incremented integer and primary key. username ( Column ) \u2013 The username for the user. Must be unique and is indexed for faster queries. hashed_password ( Column ) \u2013 The hashed password for the user. Stored as a string. Table users : The table in the database where user records are stored. Notes The id field is automatically assigned by the database and does not need to be specified when creating a new user. The username must be unique to prevent duplicate accounts. Source code in api/models.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class User ( Base ): \"\"\" SQLAlchemy model for the User table. This model represents a user in the system and maps to the 'users' table in the database. Attributes: id (Column): The unique identifier for the user. An auto-incremented integer and primary key. username (Column): The username for the user. Must be unique and is indexed for faster queries. hashed_password (Column): The hashed password for the user. Stored as a string. Table: - `users`: The table in the database where user records are stored. Notes: The `id` field is automatically assigned by the database and does not need to be specified when creating a new user. The `username` must be unique to prevent duplicate accounts. \"\"\" __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) username = Column ( String , unique = True , index = True ) hashed_password = Column ( String )","title":"User"},{"location":"api/router/data_router/","text":"Data Router Endpoints This section details the endpoints related to data management. get_hello () Simple endpoint that returns a greeting message. This endpoint is a basic test route that returns a static string message. Returns: str \u2013 A greeting message \"Hello !\". Notes This endpoint does not perform any database operations or require any request body. It is primarily used for testing and ensuring that the API is accessible. Source code in api/router/data_router.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @router . post ( \"/hello\" ) def get_hello (): \"\"\" Simple endpoint that returns a greeting message. This endpoint is a basic test route that returns a static string message. Returns: str: A greeting message \"Hello !\". Notes: This endpoint does not perform any database operations or require any request body. It is primarily used for testing and ensuring that the API is accessible. \"\"\" return \"Hello !\"","title":"data_router"},{"location":"api/router/data_router/#data-router-endpoints","text":"This section details the endpoints related to data management.","title":"Data Router Endpoints"},{"location":"api/router/data_router/#api.router.data_router.get_hello","text":"Simple endpoint that returns a greeting message. This endpoint is a basic test route that returns a static string message. Returns: str \u2013 A greeting message \"Hello !\". Notes This endpoint does not perform any database operations or require any request body. It is primarily used for testing and ensuring that the API is accessible. Source code in api/router/data_router.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @router . post ( \"/hello\" ) def get_hello (): \"\"\" Simple endpoint that returns a greeting message. This endpoint is a basic test route that returns a static string message. Returns: str: A greeting message \"Hello !\". Notes: This endpoint does not perform any database operations or require any request body. It is primarily used for testing and ensuring that the API is accessible. \"\"\" return \"Hello !\"","title":"get_hello"},{"location":"api/router/user_router/","text":"User Router Endpoints This section details the endpoints related to user management. create_access_token ( form_data , db = Depends ( get_db )) Generate a new access token for a user based on provided credentials. Parameters: form_data ( UserCreate ) \u2013 The user credentials including username and password. db ( Session , default: Depends ( get_db ) ) \u2013 The database session dependency, used to interact with the database. Returns: dict \u2013 A dictionary containing the access token and the token type. Raises: HTTPException \u2013 If the provided credentials are incorrect, a 401 Unauthorized error is raised. Notes The function checks the provided username and password against the stored user data in the database. If the credentials are valid, an access token is generated using the create_access_token function from the auth module. Source code in api/router/user_router.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @router . post ( \"/create_access_token\" ) def create_access_token ( form_data : schemas . UserCreate , db : Session = Depends ( get_db )): \"\"\" Generate a new access token for a user based on provided credentials. Args: form_data (schemas.UserCreate): The user credentials including username and password. db (Session, optional): The database session dependency, used to interact with the database. Returns: dict: A dictionary containing the access token and the token type. Raises: HTTPException: If the provided credentials are incorrect, a 401 Unauthorized error is raised. Notes: The function checks the provided username and password against the stored user data in the database. If the credentials are valid, an access token is generated using the `create_access_token` function from the `auth` module. \"\"\" user = crud . get_user ( db , form_data . username ) if not user or not auth . verify_password ( form_data . password , user . hashed_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" ) access_token = auth . create_access_token ( data = { \"sub\" : user . username }) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } create_user ( user , db = Depends ( get_db )) Create a new user in the database. Parameters: user ( UserCreate ) \u2013 The user data including username and password to be created. db ( Session , default: Depends ( get_db ) ) \u2013 The database session dependency, used to interact with the database. Returns: \u2013 schemas.UserOut: The created user information, including the user ID and username. Raises: HTTPException \u2013 If the username is already registered, a 400 Bad Request error is raised. Notes The function checks if the username is already taken. If not, a new user is created using the create_user function from the crud module. Source code in api/router/user_router.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @router . post ( \"/create_user/\" , response_model = schemas . UserOut ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): \"\"\" Create a new user in the database. Args: user (schemas.UserCreate): The user data including username and password to be created. db (Session, optional): The database session dependency, used to interact with the database. Returns: schemas.UserOut: The created user information, including the user ID and username. Raises: HTTPException: If the username is already registered, a 400 Bad Request error is raised. Notes: The function checks if the username is already taken. If not, a new user is created using the `create_user` function from the `crud` module. \"\"\" db_user = crud . get_user ( db , user . username ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Username already registered\" ) return crud . create_user ( db = db , user = user )","title":"user_router"},{"location":"api/router/user_router/#user-router-endpoints","text":"This section details the endpoints related to user management.","title":"User Router Endpoints"},{"location":"api/router/user_router/#api.router.user_router.create_access_token","text":"Generate a new access token for a user based on provided credentials. Parameters: form_data ( UserCreate ) \u2013 The user credentials including username and password. db ( Session , default: Depends ( get_db ) ) \u2013 The database session dependency, used to interact with the database. Returns: dict \u2013 A dictionary containing the access token and the token type. Raises: HTTPException \u2013 If the provided credentials are incorrect, a 401 Unauthorized error is raised. Notes The function checks the provided username and password against the stored user data in the database. If the credentials are valid, an access token is generated using the create_access_token function from the auth module. Source code in api/router/user_router.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @router . post ( \"/create_access_token\" ) def create_access_token ( form_data : schemas . UserCreate , db : Session = Depends ( get_db )): \"\"\" Generate a new access token for a user based on provided credentials. Args: form_data (schemas.UserCreate): The user credentials including username and password. db (Session, optional): The database session dependency, used to interact with the database. Returns: dict: A dictionary containing the access token and the token type. Raises: HTTPException: If the provided credentials are incorrect, a 401 Unauthorized error is raised. Notes: The function checks the provided username and password against the stored user data in the database. If the credentials are valid, an access token is generated using the `create_access_token` function from the `auth` module. \"\"\" user = crud . get_user ( db , form_data . username ) if not user or not auth . verify_password ( form_data . password , user . hashed_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" ) access_token = auth . create_access_token ( data = { \"sub\" : user . username }) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" }","title":"create_access_token"},{"location":"api/router/user_router/#api.router.user_router.create_user","text":"Create a new user in the database. Parameters: user ( UserCreate ) \u2013 The user data including username and password to be created. db ( Session , default: Depends ( get_db ) ) \u2013 The database session dependency, used to interact with the database. Returns: \u2013 schemas.UserOut: The created user information, including the user ID and username. Raises: HTTPException \u2013 If the username is already registered, a 400 Bad Request error is raised. Notes The function checks if the username is already taken. If not, a new user is created using the create_user function from the crud module. Source code in api/router/user_router.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @router . post ( \"/create_user/\" , response_model = schemas . UserOut ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): \"\"\" Create a new user in the database. Args: user (schemas.UserCreate): The user data including username and password to be created. db (Session, optional): The database session dependency, used to interact with the database. Returns: schemas.UserOut: The created user information, including the user ID and username. Raises: HTTPException: If the username is already registered, a 400 Bad Request error is raised. Notes: The function checks if the username is already taken. If not, a new user is created using the `create_user` function from the `crud` module. \"\"\" db_user = crud . get_user ( db , user . username ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Username already registered\" ) return crud . create_user ( db = db , user = user )","title":"create_user"}]}